<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://690624501.github.io</id>
    <title>Learner</title>
    <updated>2020-04-13T09:49:29.901Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://690624501.github.io"/>
    <link rel="self" href="https://690624501.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://690624501.github.io/images/avatar.png</logo>
    <icon>https://690624501.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, Learner</rights>
    <entry>
        <title type="html"><![CDATA[java导出excel报表，由xlsx格式改为csv格式]]></title>
        <id>https://690624501.github.io/post/02</id>
        <link href="https://690624501.github.io/post/02">
        </link>
        <updated>2019-11-13T09:32:07.000Z</updated>
        <summary type="html"><![CDATA[<p>在做项目的时候，客户都会把数据下载下来，所以一般都会有报表导出的功能，正常的是直接导出为xlsx格式的excel表格，由于博主参与的是停车场项目，在后续项目运行上线的时候，数据量会过大，再去导出的时候会报错 java.lang.IllegalArgumentException: Invalid row number (65536) outside allowable range (0..65535)，然后百度发现：
excel最大行数，不同版本有所不同。Excel2003版最大行数是65536行。Excel2007开始的版本最大行数是1048576行。
要不分sheet显示，要不改格式。
毋庸置疑，博主被要求改格式，好吧，只能改，改成csv文件的格式。</p>
]]></summary>
        <content type="html"><![CDATA[<p>在做项目的时候，客户都会把数据下载下来，所以一般都会有报表导出的功能，正常的是直接导出为xlsx格式的excel表格，由于博主参与的是停车场项目，在后续项目运行上线的时候，数据量会过大，再去导出的时候会报错 java.lang.IllegalArgumentException: Invalid row number (65536) outside allowable range (0..65535)，然后百度发现：
excel最大行数，不同版本有所不同。Excel2003版最大行数是65536行。Excel2007开始的版本最大行数是1048576行。
要不分sheet显示，要不改格式。
毋庸置疑，博主被要求改格式，好吧，只能改，改成csv文件的格式。</p>
<!--  more -->
<p>以上就是后面发生事情的前因。下面就来介绍一下做完之后的经验以及踩过的坑吧。</p>
<h1 id="报表导出为xlsx格式">报表导出为xlsx格式</h1>
<p>service层：</p>
<pre><code>public Workbook export(CarRecordDTO carRecordDTO) throws Exception {

						Workbook workbook = new Workbook();
            Sheet sheet = workbook.createSheet(&quot;在线车辆数据&quot;);
            Row row = sheet.createRow(0);
            row.createCell(1).setCellValue(&quot;车牌照片&quot;);
            row.createCell(2).setCellValue(&quot;车牌号&quot;);
            row.createCell(3).setCellValue(&quot;进场时间&quot;);
            row.createCell(4).setCellValue(&quot;停车时长&quot;);
            row.createCell(5).setCellValue(&quot;进场闸口&quot;);
            row.createCell(6).setCellValue(&quot;有无跨场&quot;);
            row.createCell(7).setCellValue(&quot;有无校正&quot;);

            Date currentDate = new Date();
            for (int i = 0; i &lt; carRecordList.size(); i++) {
                CarRecord carRecord = (CarRecord) carRecordList.get(i);
                row = sheet.createRow(i + 1);

                ExcelUtil.setCellValue(row, 1, carRecord.getEnterPlatePic());
                ExcelUtil.setCellValue(row, 2, carRecord.getPlateNum());
                ExcelUtil.setCellValue(row, 3, DateUtil.formatDate(carRecord.getEnterDate(), &quot;yyyy-MM-dd HH:mm&quot;));
                Date enterDate = carRecord.getEnterDate();
                Long stopTime = (currentDate.getTime() - enterDate.getTime()) / 60000;
                ExcelUtil.setCellValue(row, 4, TimeUtils.timeConvert(stopTime.intValue()));
                ExcelUtil.setCellValue(row, 5, list.get(carRecord.getEnterGate()));
                if (YES.equals(carRecord.getIsCross())) {
                    ExcelUtil.setCellValue(row, 6, &quot;有跨场&quot;);
                } else {
                    ExcelUtil.setCellValue(row, 6, &quot;无跨场&quot;);
                }

                if (YES.equals(carRecord.getIsRevise())) {
                    ExcelUtil.setCellValue(row, 7, &quot;有校正&quot;);
                } else {
                    ExcelUtil.setCellValue(row, 7, &quot;无校正&quot;);
                }
            }
						return workbook;
	｝
</code></pre>
<p>controller层：</p>
<pre><code>  Workbook workbook = carRecordService.export(carRecordDTO);
	super.writeExcel(&quot;carRecord.xls&quot;,workbook);
</code></pre>
<pre><code>protected void writeExcel(String filename, Workbook workbook) throws Exception {
        this.response.setContentType(&quot;application/octet-stream; charset=iso-8859-1&quot;);
        StringBuffer contentDisposition = new StringBuffer(&quot;attachment; filename=\&quot;&quot;);
        contentDisposition.append(filename).append(&quot;\&quot;&quot;);
        this.response.setHeader(&quot;Content-disposition&quot;, contentDisposition.toString());
        ServletOutputStream out = this.response.getOutputStream();
        workbook.write(out);
        out.flush();
        out.close();
    }
</code></pre>
<p>上面的代码就可以导出xlsx格式的excil报表了。。是不是很简单。</p>
<h1 id="报表导出为csv格式">报表导出为csv格式</h1>
<p>service层：</p>
<pre><code>public File export(CarRecordDTO carRecordDTO) throws Exception {

List&lt;String&gt; listPark = new ArrayList&lt;&gt;();
            listPark.add(&quot;车牌照片&quot;);
            listPark.add(&quot;车牌号&quot;);
            listPark.add(&quot;进场时间&quot;);
            listPark.add(&quot;停车时长&quot;);
            listPark.add(&quot;进场闸口&quot;);
            listPark.add(&quot;有无跨场&quot;);
            listPark.add(&quot;有无校正&quot;);

            tempFile =  new File(&quot;cardRecord.csv&quot;);

            CsvWriter csvOutput = new CsvWriter(tempFile.getCanonicalPath(), ',', Charset.forName(&quot;GBK&quot;));
            csvOutput.setEscapeMode(CsvWriter.ESCAPE_MODE_DOUBLED);
            // 第一行
            for (String s : listPark) {
                csvOutput.write(s);
            }
            csvOutput.endRecord();
            // 循环写出数据

            Date currentDate = new Date();
            for (CarRecord carRecord : carRecordList) {
                csvOutput.write(carRecord.getEnterPlatePic());
                csvOutput.write(carRecord.getPlateNum());
                csvOutput.write(DateUtil.formatDate(carRecord.getEnterDate(), &quot;yyyy-MM-dd HH:mm&quot;));
                Date enterDate = carRecord.getEnterDate();
                Long stopTime = (currentDate.getTime() - enterDate.getTime()) / 60000;
                csvOutput.write(TimeUtils.timeConvert(stopTime.intValue()));
                csvOutput.write(list.get(carRecord.getEnterGate()));
                if (YES.equals(carRecord.getIsCross())) {
                    csvOutput.write(&quot;有跨场&quot;);
                } else {
                    csvOutput.write(&quot;无跨场&quot;);
                }

                if (YES.equals(carRecord.getIsRevise())) {
                    csvOutput.write(&quot;有校正&quot;);
                } else {
                    csvOutput.write(&quot;无校正&quot;);
                }

                csvOutput.endRecord();
            }
            csvOutput.close();
						return tempFile;
		｝
</code></pre>
<p>controller层：</p>
<pre><code>   File tempFile = carRecordService.export(carRecordDTO);
		java.io.OutputStream out = this.response.getOutputStream();

		this.response.reset();
		this.response.setContentType(&quot;application/csv; charset=iso-8859-1&quot;);
		this.response.setHeader(&quot;content-disposition&quot;, &quot;attachment; filename=&quot;+tempFile.getPath());
		File fileLoad = new java.io.File(tempFile.getCanonicalPath());
		long fileLength = fileLoad.length();
		FileInputStream in = new FileInputStream(fileLoad);
		String length1 = String.valueOf(fileLength);

		byte[] b = new byte[10240];
		this.response.setHeader(&quot;Content_Length&quot;, length1);
		int n;
		while ((n = in.read(b)) != -1) {
			out.write(b, 0, n); //每次写入out1024字节
		}
		in.close();
		out.close();
</code></pre>
<p>这样就可以导出csv格式的报表了，下面就来讲讲踩到的坑和搞的乌龙吧：</p>
<ul>
<li>因为要引用import com.csvreader.CsvWriter 包，所以就去找相关的依赖包，然后就去maven官网去搜索，</li>
</ul>
<pre><code>&lt;!-- https://mvnrepository.com/artifact/net.sourceforge.javacsv/javacsv --&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;net.sourceforge.javacsv&lt;/groupId&gt;
      &lt;artifactId&gt;javacsv&lt;/artifactId&gt;
      &lt;version&gt;2.0&lt;/version&gt;
    &lt;/dependency&gt;
</code></pre>
<p>把这个放进pom.xml文件中，要用的包还是import不进去，然后怀疑是maven的settings.xml没设置好，然后又前前后后叭叭叭的搞了挺久的，还是没有解决，后来实在没有办法了，向同事大神求助，后来经检查
<img src="https://690624501.github.io/post-images/1573639534049.png" alt="">是把这个按钮不知道什么时候按到了，导致idea离线状态，反正博主已经哭了</p>
<ul>
<li>
<p>在写完代码的时候，在本地测试是没有问题的，生成的excil可以存放65535以上的数据，文档打开也是没有问题的，然后部署到dev环境上测试，发现文件名又不是我改的英文名，格式也是乱了，都在同一个单元格里面，又叭叭叭的找问题，最后定位到应该是前端把文档名写死了，格式也有锁定吧（因为是前后端分离的，我基本上没去看前端代码）</p>
</li>
<li>
<p>因为导出的报表由时间格式的，发现格式有问题，我在代码里面写了是yyyy-MM-dd hh:mm但是没有生效，比如2019-10-03 12:05 就显示为2019-10-3 12:5 反正就是很奇怪，百度上别人说要在前后都加&quot;\t&quot;，我也试过了，没卵用，但是改excil表格里面单元格的格式是可以的；</p>
</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[初次使用Gridea-对于Mysqsl中Int(11)最大长度的理解]]></title>
        <id>https://690624501.github.io/post/chu-ci-shi-yong-gridea-dui-yu-mysqsl-zhong-int11zui-da-chang-du-de-li-jie</id>
        <link href="https://690624501.github.io/post/chu-ci-shi-yong-gridea-dui-yu-mysqsl-zhong-int11zui-da-chang-du-de-li-jie">
        </link>
        <updated>2019-07-09T10:05:36.000Z</updated>
        <summary type="html"><![CDATA[<p>在工作的时候，看到数据库表很多int类型的字段都是int(11)，但是int的取值范围为： -2^31——2^31-1，即-2147483648——2147483647，最大为十位数字，那设计字段类型为int(11)有什么意义呢？</p>
]]></summary>
        <content type="html"><![CDATA[<p>在工作的时候，看到数据库表很多int类型的字段都是int(11)，但是int的取值范围为： -2^31——2^31-1，即-2147483648——2147483647，最大为十位数字，那设计字段类型为int(11)有什么意义呢？</p>
<!-- more -->
<p><strong>刚开始的时候，我以为int(M)中M代表着限制int的长度为M位，最近才想起来好像不怎么对，然后去网上查才发现，M代表的并不是长度，而是字符的显示宽度，在字段类型为int时，无论你显示宽度设置为多少，int类型能存储的最大值和最小值永远都是固定的</strong></p>
<p>下面开始实验证明：</p>
<ul>
<li>创建一张表</li>
</ul>
<pre><code>CREATE TABLE test_int (
 id INT (11) NOT NULL AUTO_INCREMENT,
 a INT (11) NOT NULL,
 b INT (11) UNSIGNED ZEROFILL NOT NULL,
 c INT (5) DEFAULT NULL,
 d INT (5) UNSIGNED ZEROFILL NOT NULL,
 e INT (15) DEFAULT NULL,
 PRIMARY KEY (`id`) 
)
</code></pre>
<ul>
<li>插入几条数据</li>
</ul>
<pre><code>INSERT INTO test_int (a, b, c, d, e) VALUES (1, 1, 1, 1, 1);
INSERT INTO test_int (a, b, c, d, e) VALUES (1234567890, 1234567890, 1234567890, 1234567890, 1234567890);
INSERT INTO test_int (a, b, c, d, e) VALUES (12345678910, 12345678910, 12345678910, 12345678910, 12345678910);
</code></pre>
<p><img src="https://690624501.github.io/post-images/1562664221303.png" alt="">
<em><strong>这一步证明了，int类型最大只能插入十位数字</strong></em></p>
<ul>
<li>查询数据</li>
</ul>
<pre><code>select * from test_int;
</code></pre>
<table>
<thead>
<tr>
<th>id</th>
<th>a</th>
<th>b</th>
<th>c</th>
<th>d</th>
<th>e</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>1</td>
<td>00000000001</td>
<td>1</td>
<td>00001</td>
<td>1</td>
</tr>
<tr>
<td>2</td>
<td>1234567890</td>
<td>01234567890</td>
<td>1234567890</td>
<td>1234567890</td>
<td>1234567890</td>
</tr>
</tbody>
</table>
<p><strong>如果用navicat查询结果是没有显示左边的0，但是导出之后就可以看到了</strong></p>
<ul>
<li>结论</li>
</ul>
<p>这个11代表显示宽度，整数列的显示宽度与mysql需要用多少个字符来显示该列数值，与该整数需要的存储空间的大小都没有关系，所以如果认为int(5)只能存储5个长度的数字，int(11)就会存储11个长度的数字，这是错误的。
它在数据库里面存储的都是4个字节的长度，在使用int(5)的时候如果你输入的是1，会默认给你存储00001,也就是说这个5代表的是字符宽度，当你不足5位时，会帮你补全，当你超过5位时，就没有任何的影响。</p>
<p><strong>当int字段类型设置为无符号且填充零（UNSIGNED ZEROFILL）时，当数值位数未达到设置的显示宽度时，会在数值前面补充零直到满足设定的显示宽度，为什么会有无符号的限制呢，是因为ZEROFILL属性会隐式地将数值转为无符号型，因此不能存储负的数值。</strong></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://690624501.github.io/post/hello-gridea</id>
        <link href="https://690624501.github.io/post/hello-gridea">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="http://hvenotes.fehey.com/">Gridea 主页</a><br>
<a href="http://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>𝖶𝗂𝗇𝖽𝗈𝗐𝗌</strong> 或 <strong>𝖬𝖺𝖼𝖮𝖲</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>